console.log("Content script loaded.");

// Function to scrape images as you scroll
function scrapeImages() {
  let images = [];
  document.querySelectorAll('img').forEach(img => {
    console.log(`Found image: ${img.src}`);
    images.push(img.src);
  });
  return images;
}

// Function to send images to Flask API
function sendImagesToAPI(imageUrls) {
  console.log("Sending images to API...");
  fetch('http://127.0.0.1:5000/predict_from_url', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ image_urls: imageUrls })
  })
  .then(response => response.json())
  .then(data => {
    console.log('Prediction results:', data);
    // Display results or handle them as needed
  })
  .catch(error => {
    console.error('Error:', error);
  });
}

// Scroll and scrape images
function scrollAndScrape() {
  window.scrollTo(0, document.body.scrollHeight);
  setTimeout(() => {
    let images = scrapeImages();
    sendImagesToAPI(images);
  }, 2000); // Adjust delay as needed
}

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'detectImages') {
    console.log("Detect images action received.");
    scrollAndScrape();
    sendResponse({ status: 'Scraping and detecting images' });
  }
});

// manual upload functionality
document.getElementById('uploadButton').addEventListener('click', () => {
  const fileInput = document.getElementById('fileInput');
  const file = fileInput.files[0];

  if (file) {
    const formData = new FormData();
    formData.append('file', file);

    fetch('http://127.0.0.1:5000/predict', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      const output = document.getElementById('output');
      output.innerHTML = `Prediction: ${data.prediction} <br> Confidence: ${data.confidence.toFixed(2)}`;
    })
    .catch(error => {
      console.error('Error:', error);
      const output = document.getElementById('output');
      output.innerHTML = 'An error occurred. Please try again.';
    });
  } else {
    alert('Please select a file.');
  }
});

function dragOverHandler(event) {
  event.preventDefault(); // Prevent default behavior
}

function dropHandler(event) {
  event.preventDefault(); // Prevent default behavior
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
      const img = new Image();
      img.src = e.target.result;
      imageBox.innerHTML = '';
      imageBox.appendChild(img);
      // Call your AI detection function here
      detectAI(img);
    };
    reader.readAsDataURL(file);
  }
}

// code for connecting real model
// function detectAI(img) {
//   const canvas = document.createElement('canvas');
//   canvas.width = img.width;
//   canvas.height = img.height;
//   const ctx = canvas.getContext('2d');
//   ctx.drawImage(img, 0, 0);
//   const imageData = canvas.toDataURL('image/jpeg', 0.7).split(',')[1];
//   // Send a message to the background script with the image data
//   chrome.runtime.sendMessage({ action: 'detectAI', imageData: imageData });
// }

function detectAI(img) {
    const canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    const imageData = canvas.toDataURL('image/jpeg', 0.7).split(',')[1];
  
    // Generate a random percentage from 0 to 100
    const randomPercentage = Math.round(Math.random() * 100);
  
    // Update the UI with the random percentage
    const resultText = document.getElementById('resultText');
    resultText.textContent = `This photo is likely ${randomPercentage}% generated by AI.`;
  }


// for real results
// function updateUIWithResult(isDeepfake) {
//   const resultText = document.getElementById('resultText');
//   if (isDeepfake) {
//     resultText.textContent = 'This image is likely a deepfake.';
//   } else {
//     resultText.textContent = 'This image is likely not a deepfake.';
//   }
// }

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.action === 'updateResult') {
      updateUIWithResult(request.isDeepfake);
    }
  });